OSI七层模型：
应用层
表示层
会话层
传输层
网络层
数据链路层
物理层

TCP/IP四层模型：
应用层
传输层
网际层
主机至网络层

IP地址：网络中设备的标识
端口号：用于标识进程的逻辑地址
传输协议：通讯的规则（常见TCP、UDP）

UDP：
1、将数据及源和目的封装成数据包中，不需要建立连接
2、每个数据报的大小限制在64k内
3、因无连接，是不可靠协议，可能出现丢包
4、不需要建立连接，速度快

TCP：
1、建立连接，形成传输数据的通道（对方必须要在）
2、在连接中进行大数据量传输
3、通过三次握手完成连接，是可靠协议（不会出现丢包的情况）
4、必须建立连接，效率会降低

DNS——域名解析服务器。在域名解析列表中，ip地址与域名一一对应
可通过域名获得ip地址
本机的域名解析列表可在C：/Windows/System32/drivers/etc/hosts中改变

Socket（套接字）是为网络服务提供的一种机制
通信的两端都有Socket
网络通信其实就是Socket间通信
数据在两个Socket间通过IO传输

package pk_ipdemo;

import java.net.InetAddress;
import java.net.UnknownHostException;

public class IPTest {

	public static void main(String[] args) throws UnknownHostException{
		//获取本机IP地址对象
		InetAddress ip=InetAddress.getLocalHost();
		//获取其他主机的IP地址对象
		ip=InetAddress.getByName("192.168.1.100");
		System.out.println(ip.getHostAddress());
		System.out.println(ip.getHostName());
	}
}

/**************************************************************************************************************************/

package pk_ipdemo;

import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.io.IOException;
import java.net.DatagramPacket;

public class UDPSendDemo 
{
	public static void main(String[] args) throws IOException,SocketException,UnknownHostException
	{
		/*
		 *创建UDP传输的发送端
		 *思路：
		 *1、建立UDP的Socket服务
		 *2、将要发送的数据封装到数据包中
		 *3、通过udp的socket服务将数据包发送出去
		 *4、关闭socket服务
		 */
			//1、建立UDP的Socket服务,使用DatagramSocket对象
			DatagramSocket ds =new DatagramSocket();
			//2.将要发送的数据封装到数据包中
			String str="udp 传输演示";
				//使用DatagramPacket将数据封装到该对象包中
			byte[] buf=str.getBytes();

			DatagramPacket dp=new DatagramPacket(buf,buf.length,InetAddress.getByName("192.168.1.100"),10000);
			//3.通过udp的socket服务将数据包发送出去，使用send方法
			ds.send(dp);
			//4.关闭
			ds.close();
	}
}
