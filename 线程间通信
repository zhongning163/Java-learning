/*
问题1：wait(),notify(),notifyAll(),用来操作线程为什么定义在了Object类中？
1、这些方法存在于同步中
2、使用这些方法必须要标识所属的同步的锁
3、锁可以是任意对象，所以任意对象调用的方法一定定义Object类中

问题2：wait（）和sleep（）的区别？
1、wait（）释放CPU执行权，释放锁
2、sleep（）释放CPU执行权，不释放锁

线程间通信：
多个线程在处理同一资源，但是任务却不同
*/
class Resource
{
	String name;
	String sex;
}

//输入
class Input implements Runnable
{
	//不能new对象，要保证输入与输出处理的是同一资源
	Resource r;
	Input(Resource r)
	{
		this.r=r;
	}
	public void run()
	{
		int x=0;
		while (true)
		{
			//避免在执行Input线程时输入新的名字后还未输入新的性别时就一起输出了。从而出现mike。。女的情况
			synchronized(r)
			{
				if(x==0)
				{
					r.name="Mike";
					r.sex="male";
				}
				else
				{
					r.name="小红";
					r.sex="女女女女";
				}
			}
			x=(x+1)%2;//这可以让x在while循环中不断的在0与1之间切换
		}
	}
}

//输出
class Output implements Runnable
{
	Resource r;
	Output(Resource r)
	{
		this.r=r;
	}
	public void run()
	{
		while(true)
		{
			synchronized(r)
			{
			System.out.println(r.name+"..."+r.sex);
			}
		}
	}
}
class ResourceDemo
{
	public static void main(String[] args) 
	{
		//创建资源
		Resource r=new Resource();
		//创建任务
		Input i=new Input(r);
		Output o=new Output(r);
		//创建线程，执行路径
		Thread t1=new Thread(i);
		Thread t2=new Thread(o);
		//开启线程
		t1.start();
		t2.start();
	}
}


/**********************************************************************************************************/

/*
等待/唤醒机制：

涉及的方法：
1.wait():让线程处于冻结状态，被wait的线程会被存储到线程池中
2.notify():唤线程池中一个线程（任意）
3.notifyAll():唤醒线程池中的所有线程

这些方法都必须定义在同步中
因为这些方法是用于操作线程状态的方法
必须要明确到底操作的是哪个锁上的线程

为什么操作线程的上述方法定义在了Object类中

因为这些方法是监视器的方法，监视器其实就是锁
锁可以是任意的对象，任意的对象调用的方式一定定义在Object类中
*/
class Resource
{
	 String name;
     String sex;
     boolean flag=false;
}

//输入
class Input implements Runnable
{
	//不能new对象，要保证输入与输出处理的是同一资源
	Resource r;
	Input(Resource r)
	{
		this.r=r;
	}
	public void run()
	{
		int x=0;
		while (true)
		{
			//避免在执行Input线程时输入新的名字后还未输入新的性别时就一起输出了。从而出现mike。。女的情况
			synchronized(r)
			{
				if(r.flag)
				{
					try
					{
						r.wait();
					}
					catch (InterruptedException e)
					{
					}
				
				}
				
				
					if(x==0)
					{
						r.name="Mike";
						r.sex="male";
					}
					else
					{
						r.name="小红";
						r.sex="女女女女";
					}
					
				
					r.flag=true;
					r.notify();
				
			}
			x=(x+1)%2;//这可以让x在while循环中不断的在0与1之间切换
		}
	}
}

//输出
class Output implements Runnable
{
	Resource r;
	Output(Resource r)
	{
		this.r=r;
	}
	public void run()
	{
		while(true)
		{
			synchronized(r)
			{
				if(!r.flag)
				{
					try
					{
						r.wait();
					}
					catch (InterruptedException e)
					{
					}
				}
				else
				
					System.out.println(r.name+"..."+r.sex);
					r.flag=false;	
					r.notify();
				
			}
		}
	}
}
class ResourceDemo2
{
	public static void main(String[] args) 
	{
		//创建资源
		Resource r=new Resource();
		//创建任务
		Input i=new Input(r);
		Output o=new Output(r);
		//创建线程，执行路径
		Thread t1=new Thread(i);
		Thread t2=new Thread(o);
		//开启线程
		t1.start();
		t2.start();
	}
}

/***********************************************************************************************/

/*
对ResourceDemo2的优化
*/
class Resource
{
	private String name;
    private	String sex;
    private	boolean flag=false;

	public synchronized void set(String name,String sex)
	{
		if(flag)
		{
			try
			{
				this.wait();
			}
			catch (InterruptedException e)
			{
			}
				
		}
		this.name=name;
		this.sex=sex;
		flag=true;
		this.notify();

	}
	public synchronized void out()
	{
		if(!flag)
		{
			try
			{
				this.wait();
			}
			catch (InterruptedException e)
			{
			}
		}
		else
			System.out.println(name+"..."+sex);
			flag=false;	
			this.notify();
	}
}

//输入
class Input implements Runnable
{
	//不能new对象，要保证输入与输出处理的是同一资源
	Resource r;
	Input(Resource r)
	{
		this.r=r;
	}
	public void run()
	{
		int x=0;
		while (true)
		{
			if(x==0)
			{
				r.set("Mike","male");
			}		
			else
			{
				r.set("小红","女女女女");
			}
			x=(x+1)%2;//这可以让x在while循环中不断的在0与1之间切换
		}
	}
}

//输出
class Output implements Runnable
{
	Resource r;
	Output(Resource r)
	{
		this.r=r;
	}
	public void run()
	{
		while(true)
		{
			r.out();
		}
	}
}
class ResourceDemo3
{
	public static void main(String[] args) 
	{
		//创建资源
		Resource r=new Resource();
		//创建任务
		Input i=new Input(r);
		Output o=new Output(r);
		//创建线程，执行路径
		Thread t1=new Thread(i);
		Thread t2=new Thread(o);
		//开启线程
		t1.start();
		t2.start();
	}
}
