/*
继承的好处：
1；提高了代码的复用性
2：让类与类之间产生了关系，给第三个特征多态提供了前提

java中支持单继承，不直接支持多继承，但对C++中的多继承机制进行了改良

单继承：一个子类只能一个直接父类

多继承：一个子类可以有多个直接父类（java中不允许，进行改良）
		不直接支持，因为多个父类中有相同成员，会产生调用的不确定性
		在java中是通过“多实现”的方式来体现
比如
class A
{
	void show()
	{
		System.out.println("a");
	}
}

class B
{
	void show()
	{
		System.out.println("b");
	}
}

class C extends A,B
{
}

new C().show();


java支持多层（多重）继承

C继承B，B继承A
就会出现继承体系

当要使用一个继承体系时，
1.查看该体系中的顶层类，了解该体系的基本功能
2.创建体系中的最子类对象，完成功能的使用
*/




class Person/*父类，超类，基类*/
{
	String name;
	int age;
}

class Student/*子类*/ extends Person /*继承*/
{
	//String name;
	//int age;
	void study()
	{
		System.out.println(name+"...student study..."+age);
	}
}


class Worker extends Person
{
	//String name;
	//int age;
	void work()
	{
		System.out.println(name+"...worker work..."+age);
	}
}


class ExtendsDemo
{
	public static void main(String[] args)
	{
		Student s=new Student();
		s.name="zhangsan";
		s.age=20;
		s.study();

		Worker w=new Worker();
		w.name="lisi";
		w.age=30;
		w.work();
	}
}
/*******************************************************************************************/
/*
子父类中成员的特点：
1.成员变量
2.成员函数
3.构造函数
*/

class Fu
{
	int num=5;
}
/*
当本类的成员和局部变量同名用this区分
当子父类中的成员变量同名用super区分
*/
class Zi extends Fu
{
	int num=9;
	void show()
	{
		System.out.println(num+"...."+super.num);
	}
}

class ExtendsDemo2
{
	public static void main(String[] args)
	{
			Zi c=new Zi();
			c.show();
	}

}


/*******************************************************************************************/


/*
成员函数

当子父类中出现成员函数一模一样的情况，会运行子类的函数
这种现象，称为覆盖操作。这时函数在子父类中的特性
函数两个特性：
	1.重载。同一个类中:  不区分返回值
	2.覆盖。子类中。覆盖也称为重写，覆写。override  ：   要求完全一模一样，包括返回值和参数列表
覆盖注意事项：
1.子类方法覆盖父类方法时，子类权限必须要大于风雨父类的权限（public>默认，默认就是什么都不写，父类private时不算是覆盖了，因为子类根本调用不了）
2.静态只能覆盖静态，或被静态覆盖
*/

class Fu
{
	void show1()
	{
		System.out.println("Fu show run");
	}
}

class Zi extends Fu
{
	void show2()
	{
		System.out.println("Zi show run");
	}
}

class ExtendsDemo3
{
	public static void main(String[] args)
	{
		Zi z=new Zi();
		z.show1();
		z.show2();
	}
}


/*******************************************************************************************/

/*
什么时候用覆盖操作？

当对一个类进行子类的扩展时，子类需要保留父类的功能声明，但是要
定义子类中该功能的特有内容时，就使用覆盖操作完成。
*/

class Phone
{
	void call()
	{
		System.out.println("calling");
	}
	void show()
	{
		System.out.println("number");
	}
}

class NewPhone extends Phone
{
	void show()
	{
		System.out.println("name");
		System.out.println("pic");
		System.out.println("number");
	}
}

class ExtendsDemo4
{
	public static void main(String[] args)
	{
		NewPhone p=new NewPhone();
		p.call();
		p.show();
	}
}


/***********************************************************************************/


/*
子父类中构造函数的特点：
在子类构造对象时，发现访问子类构造函数时，父类构造函数也会运行
原因：在子类的构造函数中第一行有一个默认的隐式语句。 super（）;

子类的实例化过程：子类中所有的构造函数默认都会访问父类中的空参数的构造函数
*/

class Fu
{
	Fu()				//构造函数
	{
		System.out.println("fu run");
	}
}

class Zi extends Fu
{
	Zi()				//这也是构造函数
	{
		//super();  this();   super()调用父类中空参数的构造函数，this（）调用本类的构造函数
		System.out.println("zi run");
	}
}

class ExtendsDemo5
{
	public static void main(String[] args)
	{
		new Zi();			//创建一个匿名对象，构造函数会随着对象的创建而调用一次
	}
}
