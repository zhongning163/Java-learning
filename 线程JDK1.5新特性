/*
Object obj =new Object();
void show()
{
	synchronized(obj)  // 同步代码块，对于锁的操作是隐式的
	{
		code...;
	}
}

//JDK1.5之后将同步和锁封装成了对象，并将操作锁的隐式方式定义到了该对象中
//将隐式动作变成了显式动作
Lock lock=new ReentrantLock();  
void show()
{
	lock.lock();//获取锁
	code... throws Exception（）
	lock.unlock();//释放锁 释放锁通常定义在finally中
}


JDK1.5之后提供了Condition接口，用lock.newCondition()方法创建Condition对象
每一组Condition对象都有一组监视器对象（await、signal、signalAll）
解决了以前只能用一个锁对象上的一组监视器从而导致notifyAll会唤醒本方和对方所有线程的局限性

Lock接口：
它的出现替代了同步代码块或者同步函数，将同步的隐式锁操作变成了显式锁操作
同时更为灵活，可以一个锁上挂多个监视器对象
lock.lock();//获取锁
lock.unlock();//释放锁 释放锁通常定义在finally中

Condition接口：
它的出现替代了Object类中的wait，notify，notifyAll方法。
将这些监视器方法单独进行封装，编程Condition监视器对象
可以将任意锁进行组合，
*/

import java.util.concurrent.locks.*;

class Resource
{
	private String name;
	private int count=1;
	private boolean flag=false;

	//创建一个锁对象
	Lock lock=new ReentrantLock();
	//通过已有的锁获取该锁上的监视器对象
	//Condition con=lock.newCondition();
	//通过已有的锁获取两组监视器，一组监视生产者，一组监视消费者
	Condition producer_con=lock.newCondition();
	Condition consumer_con=lock.newCondition();

	public void set(String name)
	{
		lock.lock();
		try
		{
			while(flag)
			//try{this.wait();}catch(InterruptedException e){}
			try{producer_con.await();}catch(InterruptedException e){}
			this.name=name+count;
			count++;
			System.out.println(Thread.currentThread().getName()+"....生产者5.0...."+this.name);
			flag=true;
			/*
			用notifyAll而不是notify的原因：用notify只唤醒一个被冻结的线程，如果唤醒的是本方而不是对方的线程，
			四个线程都进入冻结状态，这时会出现死锁现象
			因此用notifyAll保证对方被唤醒，避免出现死锁现象
			*/
			//notifyAll();
			
			consumer_con.signal();//唤醒消费者的所有线程
		}
		finally
		{
			lock.unlock();
		}
	}

	public void out()
	{
		lock.lock();
		try
		{
			while(!flag)
			//try{this.wait();}catch(InterruptedException e){}
			try{consumer_con.await();}catch(InterruptedException e){}
			System.out.println(Thread.currentThread().getName()+"....消费者5.0.........."+this.name);
			flag=false;
			//notifyAll();
			producer_con.signal();//唤醒生产者的所有线程
		}
		finally
		{
			lock.unlock();
		}
	}
}

class Producer implements Runnable
{
	 private Resource r;
	 Producer(Resource r)
	 {
		 this.r=r;
	 }
	 
	 public void run()
	 {
		while(true)
		{
			r.set("烤鸭");
		}
	 }
}


class Consumer implements Runnable
{
	 private Resource r;
	 Consumer(Resource r)
	 {
		 this.r=r;
	 }
	 
	 public void run()
	 {
		while(true)
		{
			r.out();
		}
	 }
}
class LockDemo
{
	public static void main(String[] args) 
	{
		Resource r=new Resource();

		Producer p=new Producer(r);
		Consumer c=new Consumer(r);

		Thread t0=new Thread(p);
		Thread t1=new Thread(p);
		Thread t2=new Thread(c);
		Thread t3=new Thread(c);

		t0.start();
		t1.start();
		t2.start();
		t3.start();
	}
}
