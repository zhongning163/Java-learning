/*
进程：正在进行中的程序

线程：进程中一个负责程序执行的控制单元（执行路径）
一个进程中可以多执行路径，称之为多线程

一个进程中至少要有一个线程

开启多个线程是为了同时运行多部分代码

每一个线程都有自己运行的内容，这个内容可以成为线程要执行的任务

多线程好处：解决了多部分同时运行的问题

多线程弊端：线程太多导致效率降低

JVM中执行main函数的线程与负责垃圾回收的线程就是多线程

Object类中的finalize方法会在垃圾回收器运行时执行，System类中的gc方法会提醒垃圾回收器运行，但不确定什么时候运行
*/
class Demo extends Object
{
	public void finalize()
	{
		System.out.println("垃圾回收中");
	}
}

class  ThreadDemo
{
	public static void main(String[] args) 
	{
		new Demo();
		new Demo();
		System.gc();
		new Demo();
		System.out.println("Hello World!");
	}
}

/********************************************************************************************/

/*
创建新执行线程有两种方法：
一种是将类声明为Thread的子类，该子类应重写Thread类的run方法
步骤：
1.定义一个类继承Thread类。
2.覆盖Thread类中的run方法
3.直接创建Thread的子类对象创建线程
4.调用start方法开启线程并调用线程的任务run方法执行

创建线程的目的是为了开启一条执行路径，去运行指定的代码和其他代码实现同时运行

而运行的指定代码就是这个执行路径的任务

JVM创建的主线程的任务都定义在了主函数中

Thread类用于描述线程，线程是需要任务的。所以Thread类也对任务进行描述
这个任务就通过Thread类中的run方法实现，也就是说，run方法就是封装自定义线程运行任务的函数

开启线程是为了运行指定代码，所以只有继承Thread类，并覆写run方法
将运行的代码定义在run方法中即可
*/
class Demo extends Thread
{
	private String name;
	Demo(String name)
	{
		//将name作为线程的名称，因为Thread类中有Thread（String name）构造方法
		//super(name);		
		this.name=name;
	}
	public void run()
	{
		for(int x=0;x<10;x++)
		{
			for(int y=-9999999;y<99999999;y++)
			{
				for(int z=-999999;z<9999999;z++)
				{}
			}
			//可以通过Thread的getName方法获取线程名称  Thread-编号（从0开始）
			//Thread类中的currentThread方法可以返回当前正在运行的线程对象，这个方法是static的，可以通过类名直接调用
			System.out.println(name+"...x="+x+"..."+Thread.currentThread().getName());	
													
		}
	}
}
class ThreadDemo2 
{
	public static void main(String[] args) 
	{
		Demo d1=new Demo("旺财");
		Demo d2=new Demo("xiaoqiang");
		//如果直接写d1.run(),只是调用一个普通的run方法，并没有开启一个新的线程
		d1.start();		
		//这个程序有三个线程，主线程、以及创建的两个线程。主线程的名字就是main
		System.out.println("Hello World!..."+Thread.currentThread().getName());			
		d2.start();
	}
}

/*******************************************************************************************************************/

/*
创建线程的第一种方式：继承Thread类

创建线程的第二种方式：实现Runnable接口

步骤：
1.定义类实现Runnable接口
2.覆盖接口中的run方法，将线程的任务代码封装到run方法中
3.通过Thread类创建线程对象，并将Runnable接口的子类对象作为Thread类的构造函数的参数进行传递
	原因：因为线程的任务都封装在Runnable接口子类对象的run方法中，所以要在线程对象创建时就必须明确要运行的任务
4.调用线程对象的start方法开启线程

Runnable接口应该由那些打算通过某一线程执行其实例的类来实现。类必须定义一个称为run的无参数方法

实现Runnable接口的好处：
1.将线程的任务从线程的子类中分离出来，进行了单独的封装
	按照面向对象的思想将任务封装成对象
2.避免了java单继承的局限性

因此，创建线程的第二种方式较为常用
*/
//extends Fu(Demo不能继承Thread)，用接口扩展Demo类的功能，让其中的内容可以作为线程的任务执行
class Demo implements Runnable 
{
	public void run()
	{
		show();
	}
	public void show()
	{
		for(int x=0;x<20;x++)
		{
			System.out.println(Thread.currentThread().getName()+"..."+x);
		}
	}
}

class ThreadDemo3
{
	public static void main(String[] args)
	{
		Demo d=new Demo();  //或者Runnable d=new Demo();
		Thread t1=new Thread(d);
		Thread t2=new Thread(d);
		t1.start();
		t2.start();
	}
}

/*******************************************************************************************************************/

/*
需求：卖票
*/
/*
线程安全问题产生的原因
1.多个线程在操作共享的数据
2.操作共享数据的线程代码有多条

当一个线程在执行操作共享数据的多条代码过程中，其他线程参与了运算
就会导致线程安全问题的产生

解决思路：
将多条操作共享数据的线程代码封装起来，当有线程在执行这些代码的时候，其他线程是不可以参与运算的
必须要当前线程把这些代码都执行完毕后，其他线程才可以参与

在java中，可以用同步代码块解决这个问题

同步代码块的格式：
synchronized(对象)
{
	需要被同步的代码;
}

同步的好处：
解决了线程安全问题

同步的弊端；相对降低了效率，因为同步外的线程都会判断同步锁

同步的前提：同步中必须有多个线程并使用同一个锁


*/
class Ticket implements Runnable//extends Thread   //Runnable接口没有声明异常，因此run方法不能throws异常，需要用trycatch
{
	private int num=10000;
	//Object obj=new Object();

	public void run()
	{
		while (true)
		{
			synchronized(this) //或者synchronized(obj);
			{		
				if (num>0)
				{
					try
					{
						Thread.sleep(10);		//会出现错号票
					}
					catch (InterruptedException e)		
					{

					}
					System.out.println(Thread.currentThread().getName()+"...卖票..."+num--);
				}
			}
		}
	}
}
class TicketDemo
{
	public static void main(String[] args) 
	{
		Ticket t=new Ticket();	//创建一个线程任务对象

		Thread t1=new Thread(t);
		Thread t2=new Thread(t);
		Thread t3=new Thread(t);
		Thread t4=new Thread(t);

		t1.start();
		t2.start();
		t3.start();
		t4.start();
		
		/*
		Ticket t1=new Ticket();
		Ticket t2=new Ticket();
		Ticket t3=new Ticket();
		Ticket t4=new Ticket();

		t1.start();
		t2.start();
		t3.start();
		t4.start();
		*/
	}
}

/***************************************************************************************************************/

/*
需求：两个储户，每个都到银行每次存钱100，每个人都存三次
*/
class Bank
{
	private int sum;
	private Object obj=new Object();
	public synchronized void add(int num)  //同步函数
	{
		//synchronized(obj)
		//{
			sum=sum+num;
			try
			{
				Thread.sleep(10);
			}
			catch (InterruptedException e)
			{
			}
			System.out.println("sum="+sum);
		//}
	}
}
class Cus implements Runnable
{
	private Bank b=new Bank();
	public void run()
	{
		for(int x=0;x<3;x++)
		{
			b.add(100);
		}
	}
}
class BankDemo
{
	public static void main(String[] args) 
	{
		Cus a=new Cus();
		Thread c1=new Thread(a);
		Thread c2=new Thread(a);
		c1.start();
		c2.start();
	}
}

/*************************************************************************************************************/


/*
同步函数使用的锁是this

同步函数与同步代码块的区别：
1.同步函数的锁是固定的this
2,同步代码块的锁是任意的对象

	建议使用同步代码块
		静态的同步函数使用的锁是  该函数所属字节码对象，可以用getClass方法获取，也可以用当前 类名.class
*/


class Ticket implements Runnable
{
	private int num=400;
	Object obj=new Object();
	boolean flag=true;
	public void run()
	{
		if(flag)
		{
			while (true)
			{
				synchronized(obj) //或者synchronized(this);
				{		
					if (num>0)
					{
						try
						{
							Thread.sleep(10);		//会出现错号票
						}
						catch (InterruptedException e)		
						{}
						System.out.println(Thread.currentThread().getName()+"...obj..."+num--);
					}
				}
			}
		}
		
	else
		while(true)
				show();
	}	
		public synchronized void show()		//同步函数的锁是this
		{
			if (num>0)
					{
						try
						{
							Thread.sleep(10);		//会出现错号票
						}
						catch (InterruptedException e)		
						{}
						System.out.println(Thread.currentThread().getName()+"...卖票..."+num--);
					}
		}
	
}


class SynFunctionLockDemo 
{
	public static void main(String[] args) 
	{
		Ticket a=new Ticket();
		Thread t1=new Thread(a);
		Thread t2=new Thread(a);
		t1.start();
		a.flag=false;   
		t2.start();
	}
}
