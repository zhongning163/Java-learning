/*
异常：在运行时期发生的不正常情况

在java中用类的形式对不正常情况进行了描述和封装对象

描述不正常的情况的类，就称为异常类

以前正常流程代码和问题处理代码相结合
现在讲正常流程代码和问题处理代码分离，提高阅读性

其实异常就是java通过面向对象的思想将问题封装成了对象

用异常类对其进行描述
不同的问题用不同的类进行具体的描述。比如角标越界，空指针等等

问题很多，意味着描述的类也很多
将其共性进行向上抽取，形成了异常体系

最终问题（不正常情况）就分成了两大类
Throwable：（父类）： 无论是error，还是异常，问题发生就该抛出，让调用者知道并处理
//该体系的特点就在于Throwable及其所有的子类都具有可抛性
凡是可以被throw，throws两个关键字操作的类和对象都具备有可抛性
	1.一般不可处理的。Error	
		特点：是由JVM抛出的严重问题
			这种问题发生一般不针对性处理
	2.可以处理的。Exception

该体系的特点：
	子类的后缀名都是用其父类名作为后缀，阅读性很强

自定义异常：java中没有定义过的异常，自定义描述异常并将其封装成对象

注意：如果想让一个类成为异常类，必须要继承异常体系，因为只有成为异常体系的
子类才有资格具备可抛性，才可以被两个关键字throw和throws所操作

异常的分类：
	1.编译时被检测异常：只要是Exception和其子类都是，除了RuntimeException体系
		这种问题一旦出现，希望在编译时就进行检测，让这种问题有对应的处理方式
		这样的问题都可以针对性的处理

	2.编译时不检测异常（运行时异常）：就是Exception中的RuntimeException和其子类
		这种问题的发生，无法让功能继续，运算无法进行，更多是因为调用者的原因或者引发了内部状态的改变导致的
		这种问题一般不处理，直接编译通过，在运行时，让调用者调用时的程序强制停止，让调用者对代码进行修正

		可能在执行方法期间抛出但未被捕获的RuntimeException的任何子类都无需在throws字句中进行声明

throw和throws的区别
1.throws使用在函数上
  throw使用在函数内
2.throws抛出的是异常类，可以抛出多个，用逗号隔开
  throw抛出的是异常对象，一次只能抛出一个


异常处理的捕捉形式：
这是可以对异常进行针对性处理的方式。

具体格式：
try
{
	//需要被检测异常的代码
}
catch（异常类 变量） //括号里是用来接收当前发生异常的异常对象
{
	//处理异常的代码
}
finally
{
	//一定会被执行的代码
}
*/

class FuShuIndexException extends RuntimeException
{
	FuShuIndexException()
	{}
	FuShuIndexException(String message)
	{  
		super(message);
	}

}
class Demo
{
	public int method(int[] arr,int index) //throws FuShuIndexException   //这叫声明抛出，如果是继承的Exception而不是RuntimeExceptionn，就要声明以便抛出
	{
		
		if(arr==null)
			throw new NullPointerException("数组的引用不能为空");
		if(index>=arr.length)
		{
			throw new ArrayIndexOutOfBoundsException("这个数超出了："+index);
		}
		if(index<0)
		{
			throw new FuShuIndexException("数组角标不能为负数："+index);
		}

		
		return arr[index];
	}
}

class ExceptionDemo
{
	public static void main(String[] args) throws FuShuIndexException
	{
		int[] arr=new int[3];

		Demo d=new Demo();
		int num=d.method(arr,-30);
		System.out.println("num="+num);
		System.out.println("over");
	}
}

/*********************************************************************************************/

/*


异常处理的原则：
	1.函数内容如果抛出需要检测的异常，那么函数上必须要声明
	否则必须在函数内用trycatch捕捉，否则编译失败

	2.如果调用到了声明异常的函数，要么trycatch要么throws，否则编译失败

	3.什么时候catch，什么时候throws呢？
	功能内部能解决的问题就用trycatch，不能解决的就用throws告诉调用者，由调用者解决
	
	4.一个功能如果抛出了多个异常，那么调用时，必须对应多个catch进行针对性的处理
	内部有几个需要检测的异常，就抛几个异常，抛出几个，就catch几个
*/

class FuShuIndexException extends Exception
{
	FuShuIndexException()
	{}
	FuShuIndexException(String message)
	{
		super(message);
	}
}

class Demo 
{
public int method(int[] arr,int index)throws FuShuIndexException,NullPointerException//注意是在方法后抛出异常类，而不是在类名后
	{
		if(arr==null)
			throw new NullPointerException("没有数组实体");
		if(index<0)
			throw new FuShuIndexException("角标变成了负数");
		return arr[index];
	}
}

class TryCatchDemo
{
	public static void main(String[] args)
	{
		int [] array=new int[]{2,3,2,44,3,53,5};
		Demo d=new Demo();

		try
		{
			int num=d.method(array,-3);
			System.out.println("num="+num);
		}

		
		catch(NullPointerException ojbk)
		{
			System.out.println(ojbk);
		}
		catch(FuShuIndexException ojbk)
		{
			System.out.println("别把角标设为负数！");
			System.out.println("message:"+ojbk.getMessage());
			System.out.println("string:"+ojbk/*.toString()*/);     //.toString()也可以省略
		
			ojbk.printStackTrace();   //JVM默认的异常处理机制就是调用的异常对象的这个方法
			
			System.exit(0);			//退出JVM（只有此时finally代码块才不会执行，其余时候都执行）
		}
		
		catch(Exception ojbk)				//多catch父类的catch一定要放在最下面
		{}
		
		finally				//通常用于关闭（释放）资源
		{
			System.out.println("over");
		}


	/*
		比如：
		连接数据库
		查询
		关闭连接
		*/
	}
}

try catch finally代码块组合特点
1.
try catch finally
2.
try catch（可多个） 当没有必要资源需要释放时，可以不用定义finally
3.
try finally  异常无法直接catch处理，但是资源需要关闭

void show()throws Exception
{
	try
	{
		throw new Exception();
	}

	finally
	{
	}
}
