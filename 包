/*
包：
对类文件进行分类管理
给类提供多层命名空间
写在程序文件的第一行
类名的全称是包名.类名
包也是一种封装形式

包与包之间的类进行访问，被访问的包中的类必须是public的，被访问的包中的类的方法也必须是public的
*/

package mypack;		//用javac -d . PackageDemo.java编译之后，会在当前文件夹下生成“mypack”目录，并将该类存在这个目录下
					//用java mypack.PackageDemo运行
					//package mypack1.mypack2.mypack3.mypack4可以用来创建多级目录（包）
import packa.Demo;	//import的作用：为了简化类名的书写
import packa.*;	/*导入packa包中所有的类，但假如packa下还有子包packaaa，子包中有类文件DemoAbc.class，
				程序中不能直接调用DemoAbc.class,因为import导入的是包中所有的类，而不是包中的子包*/
import packa.packaaa.*;
//导包的原则：用到哪个类，就导入哪个类
class PackageDemo
{
	public static void main(String[] args) 
	{
		packa.Demo a=new packa.Demo();
		Demo z=new Demo();
		a.show();
		//packb.DemoB b=new packb.DemoB();		//PackageDemo.java:22: 错误: method() 在 DemoB 中是 protected 访问控制
		//b.method();							//protected修饰符用来给子类
		System.out.println("Hello Package");
	}
}

/*
总结：
修饰符：
			public			protected		default（什么都不写）		private
同一类中	 ok					ok				ok							ok
同一包中	 ok					ok				ok
子类中		 ok					ok
不同包中	 ok

protected是给不同包中的子类使用的
*/

/***************************************************************************************************/

package packa;

public class Demo extends packb.DemoB //一定不要忘了写packb.DemoB
{
	public void show()
	{
		method();
		System.out.println("Hello zhongning");
	}

}

/***************************************************************************************************/

package packb;
public class DemoB 
{
	protected void method()		//protected:只有继承了这个类的子类，才能使用这个方法，不能通过创建这个类的对象来调用这个方法
	{
		System.out.println("protected run");
	}
}

/***************************************************************************************************/
Jar包里的文件不需解压就可直接运行（先将classpath设为目标的jar文件）
