/*
abstract class AbsDemo
{
	abstract void show1();
	abstract void show2();
}

当一个抽象类中的方法都是抽象的时候，这时候可以将该抽象类
用另一种形式定义和表示，就是接口

定义接口使用的关键字不是class，是interface

接口中常见的成员，而且这些成员都有固定的修饰符
1.全局变量：public static final

2.抽象方法：public abstract  就算不写这些，只要是inteface， java也会自己加上

由此得出结论，接口中的成员都是公共的权限
*/

interface Demo			//interface是class的特殊形式，但编译之后生成的仍是Demo.class文件
{
	public static final int NUM=4;
	public abstract void show1();
	public abstract void show2();
}

/*
类与类之间是继承关系，类与接口之间是实现关系

接口不可以实例化，只能由实现了接口的子类并覆盖了接口中所有的抽象方法后，
该子类才可以实例化，否则这个子类就是一个抽象类
*/

class DemoImpl implements /*实现*/Demo
{
	public void show1()
	{
	}
	public void show2()
	{
	}
}

/*
在java中不直接支持多继承，因为会出现调用的不确定性
所以java将多继承机制改良，在java中变成了多实现

一个类可以实现（implements）多个接口（interface）
*/
interface A
{
	public abstract void showA();
}
interface Z
{
	public abstract void showZ();
}

class Test implements A,Z		//多实现
{
	public void showA(){}
	public void showZ(){}
}

/*一个类在继承另一个类的同时，还可以实现多个接口
接口的出现避免了单继承的局限性
*/

class Q
{
	public void method()
	{}
}
class Test2 extends Q implements A,Z		//一个类在继承另一个类的同时，还可以实现多个接口
{
	public void showA(){}
	public void showZ(){}
}

interface CC
{
	public abstract void show();
}
interface MM
{
	public abstract void method();
}

interface QQ extends CC,MM	//接口与接口之间是继承关系，而且接口可以多继承
{
	public abstract void function();
}

class WW implements QQ
{	//覆盖3个方法
	public void show(){}
	public void method(){}
	public void function(){}
}
class InterfaceDemo
{
	public static void main(String[] args)
	{
		DemoImpl d=new DemoImpl();
		System.out.println(d.NUM);
		System.out.println(DemoImpl.NUM);
		System.out.println(Demo.NUM);
	}
}

/*
接口的特点：
1.接口是对外暴露的规则
2.接口是程序的功能扩展
3.接口的出现降低耦合性
4.接口可以用来多实现
5.类与接口之间是实现关系，而且类可以继承一个类的同时实现多个接口
6.接口与接口之间可以有继承关系，而且可以多继承
*/

/*************************************************************************************************/

*
接口与抽象类都是不断抽取出来的抽象的概念
区别1：抽象类体现继承关系，一个类只能单继承
接口体现实现关系，一个类可以多实现

区别2：抽象类是继承，是“is a”关系，在定义该体系的基本内容
接口是实现，是“like a”关系，在定义体系额外功能

区别3：抽象类中可以定义非抽象方法，供子类直接使用
接口的方法都是抽象，必须由子类去实现，接口中的成员都有固定修饰符
*/

abstract class 犬
{
	abstract void 吼叫();
}

interface 导盲
{
	abstract void 导盲();
}

class 导盲犬 extends 犬 implements导盲
{
	public void 吼叫()
	{
	}
	public void 导盲()
	{
	}
}

/*******************************************************************************************************/

/*
笔记本电脑的使用
为了扩展笔记本电脑的功能，但日后出现什么设备不知道

定义一个规则，只要日后出现的设备都符合这个规则就可以了
规则在Java中就是接口
*/
interface USB	//暴露的规则
{
	public void open();
	public void close();
}

class BookPC
{
	public static void main(String[] args)
	{
		useUSB(/*原来是null*/new Upan());	//功能扩展
		useUSB(new Mouse());
	}
	//使用规则
	public static void useUSB(USB u)	//接口类型的引用，用于接收（指向）接口的子类对象
	{
		u.open();
		u.close();
	}
}

//一年后————————————————————————————————————————————————————————————————————
//实现规则
//这些设备和电脑的耦合性降低了
class Upan implements USB
{
	public void open()
	{
		System.out.println("upan open");
	}

	public void close()
	{
		System.out.println("upan close");
	}
}

class Mouse implements USB
{
	public void open()
	{
		System.out.println("Mouse open");
	}
	public void close()
	{
		System.out.println("Mouse close");
	}
}
