/*
抽象类：
抽象：笼统，模糊，不具体

特点：
1.方法只有声明没有实现时，该方法就是抽象方法，需要被abstract修饰
抽象方法必须定义在抽象类中。该类必须也被abstract修饰
2.抽象类不可以被实例化，因为调用抽象方法没意义
3.抽象类必须有其子类覆盖了所有的抽象方法后，该子类才可以实例化
否则，这个子类还是抽象类。   实例化的意思就是创建对象

1.抽象类中有构造函数吗？
有，用于给子类对象进行初始化

2.抽象类可以不定义抽象方法吗？
可以，但很少见，目的就是不让该类创建对象，AWT的适配器对象就是这种类
通常这个类中的方法有方法体(即花括号)，但是没有内容

3.抽象关键字不可以和哪些关键字共存？
private不行，因为抽象类中的方法就是用来被覆盖的
static不行
final不行，final是不允许覆盖，abstract需要覆盖，矛盾

4.抽象类和一般类的异同点
相同点：
	抽象类和一般类都是用来描述事物的，都在内部定义了成员
不同点：
	1.一般类有足够的信息描述事物，
	抽象类描述事物的信息有可能不足
	2.一般类中不能定义抽象方法，只能定义非抽象方法
	抽象类中可定义抽象方法，同时也可以定义非抽象方法
	3.一般类可以被实例化。
	抽象类不可以被实例化

5.抽象类一定是个父类吗？
	是的，因为需要子类覆盖其方法后才可以对子类实例化。


abstract class Demo
{
	void show1()
	{}
	void show2()
	{}
}
*/

abstract class Demo			//抽象函数所在的类也必须标记为abstract
{
	abstract/*抽象*/void show();    //抽象方法：没有花括号
}

class DemoA extends Demo
{
	void show()
	{
		System.out.println("demoa show");
	}
}

class DemoB extends Demo
{
	void show()
	{
		System.out.println("demob show");
	}
}

class AbstractDemo
{
	public static void main(String[] args)
	{
	}
}

/****************************************************************************************************/

/*
雇员示例：
需求：公司中程序员有姓名，工号，薪水，工作内容
项目经理有姓名，工号，薪水，工作内容，奖金
对给出需求进行数据建模

分析：
在这个问题领域中，先找出涉及的对象
通过名词提炼法：
程序员：
	属性：姓名，工号，薪水
	行为：工作
项目经理：
	属性：姓名，工号，薪水，奖金
	行为：工作

程序与经理不存在着直接继承关系
但是程序员和经理却具有共性内容，可以进行抽取，因为他们都是公司的雇员
可以将程序员和经理进行抽取，建立体系

*/

//描述雇员

abstract class Employee
{
	private String name;
	private String id;
	private double pay;
	Employee(String name,String id,double pay)
	{
		this.name=name;
		this.id=id;
		this.pay=pay;
	}

	public abstract void work();		//因为工作内容不确定，因此设置为抽象方法

}

//描述程序员
class Programmer extends Employee
{
	Programmer(String name,String id,double pay)
	{
		super(name,id,pay);
	}
	public void work()
	{
		System.out.println("code...");
	}
}

//描述经理
class Manager extends Employee
{
	private int bonus;
	Manager(String name,String id,double pay,int bonus)
	{
		super(name,id,pay);
		this.bonus=bonus;
	}
	public void work()
	{
		System.out.println("manage...");
	}
}

class AbstractTest
{	public static void main(String[] args)
	{
		Manager A=new Manager("王力","01",1000,200);
	}

}

/******************************************************************************************************/

/*
abstract class AbsDemo
{
	abstract void show1();
	abstract void show2();
}

当一个抽象类中的方法都是抽象的时候，这时候可以将该抽象类
用另一种形式定义和表示，就是接口
*/
//定义接口使用的关键字不是class，是interface
/*
接口中常见的成员，而且这些成员都有固定的修饰符
1.全局变量：public static final

2.抽象方法：public abstract     就算不写这些，只要是inteface， java也会自己加上

由此得出结论，接口中的成员都是公共的权限
*/
interface Demo			//Interface是class的特殊形式，但编译之后生成的仍是Demo.class文件
{
	public static final int NUM=4;
	public abstract void show1();
	public abstract void show2();
}

/*
类与类之间是继承关系，类与接口之间是实现关系

接口不可以实例化，只能由实现了接口的子类并覆盖了接口中所有的抽象方法后，
该子类才可以实例化，否则这个子类就是一个抽象类
*/

class DemoImpl implements /*实现*/Demo
{
	public void show1()
	{
	}
	public void show2()
	{
	}
}

class InterfaceDemo
{
	public static void main(String[] args)
	{
		DemoImpl d=new DemoImpl();
		System.out.println(d.NUM);
		System.out.println(DemoImpl.NUM);
		System.out.println(Demo.NUM);
	}
}
