/*
对象的多态性。

class 动物
{}
class 猫 extends 动物
{}
class 狗 extends 动物
{}

猫 x=new 猫();
动物 x=new 猫();	//一个对象，两种形态

猫这类事物既具备着猫的形态，又具备着动物的形态
这就是对象的多态性。

简单说：就是一个对象对应着不同的类型

多态在代码中的体现：
	父类或者接口的引用指向其子类的对象

多态的好处：
	提高了代码的扩展性，前期定义的代码可以使用后期的内容


多态的弊端：
	前期定义的内容不能使用（调用）后期子类的特有内容

多态的前提：
	1.必须有关系，继承或者实现
	2.要有覆盖
*/
abstract class Animal
{
	abstract void eat();
}

class Dog extends Animal
{
	void eat()
	{
		System.out.println("啃骨头");
	}
	void lookhome()
	{
		System.out.println("看家");
	}
}

class Cat extends Animal
{
	void eat()
	{
		System.out.println("吃鱼");
	}
	void catchMouse()
	{
		System.out.println("抓老鼠");
	}
}


class Pig extends Animal
{
	void eat()
	{
		System.out.println("饲料");
	}
	void gongDi()
	{
		System.out.println("拱地");
	}
}

class DuoTai
{
	public static void main(String[] args)
	{
		Animal a= new Cat();	//向上转型：自动类型提升，猫对象提升成了动物类型，但是特有功能无法访问
						//作用是限制对特有功能的访问
		a.eat();	//如果还想用具体动物猫的特有功能，可以将该对象向下转型
		Cat c=(Cat)a;	//向下转型的目的是为了调用子类中的特有方法

		//注意：对于转型，自始至终都是子类对象在做着类型的变化
		Cat c=new Cat();
		
		Dog d=new Dog();

		method(c);
		method(d);
		method2(new Pig());
	}

	public static void method2(Animal a)
	{
		a.eat();
	}
	public static void method(Cat c)
	{
		c.eat();
	}
	public static void method(Dog d)
	{
		d.eat();
	}
}


/**************************************************************************************************************/


/*
多态时。
成员的特点：
1.成员变量：
	编译时：参考引用型变量所属的类中是否有调用的成员变量，有则编译通过，没有则编译失败
	运行时；参考引用型变量所属的类中是否有调用的成员变量，并运行该所属类中的成员变量
	简单说：编译和运行都参考等号的左边（Fu z=new Zi();）

2.成员函数（非静态）
	编译时：参考引用型变量所属的类中是否有调用的函数，有则编译通过，没有则编译失败
	运行时：参考的是对象所属的类中是否有调用的函数
	简单说：编译看左边，运行看右边

3.静态函数
	编译时：参考引用型变量所属的类中是否有调用的静态方法
	运行时：参考引用型变量所属的类中是否有调用的静态方法
	简单说：编译和运行都看左边
	其实对于静态方法，是不需要对象的，直接用类名调用即可
*/

class Fu
{
	int num=3;
	void show()
	{
		System.out.println("fu show");
	}

	static void method()
	{
		System.out.println("fu static method");
	}
}

class Zi extends Fu
{
	int num=4;
	void show()
	{
		System.out.println("zi show");
	}
	static void method()
	{
		System.out.println("zi static method");
	}
}

class DuoTaiTeDian
{
	public static void main(String[] args)
	{
		Fu z=new Zi();
		z.show();
		System.out.println(z.num);
		z.method();
	}
}
